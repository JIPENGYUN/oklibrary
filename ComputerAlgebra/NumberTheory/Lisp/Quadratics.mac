/* Oliver Kullmann, 5.8.2009 (Swansea) */
/* Copyright 2009, 2016 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/NumberTheory/Lisp/Quadratics.mac
  \brief Around quadratic functions

Use by

oklib_load("OKlib/ComputerAlgebra/NumberTheory/Lisp/Quadratics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$


/* ******************************
   * Counting integer equations *
   ******************************
*/

/* The number of pairs [p,q] with p,q in {a, ..., b} such that
   both roots of x^2+p*x+q=0 are integers.
   a and b are integers.
   For a = 1 and b = n this is sequence A091627 in the sequence library.
*/
count_quadintsol_bydef(a,b) := block([count : 0],
  for p : a thru b do
    for q : a thru b do
      if every_s(integerp,map(rhs,solve(x^2 + p*x + q))) then 
        count : count + 1,
  count)$


/* ******************
   * Square numbers *
   ******************
*/

/* Argument integer n, returns true if n is square, and false otherwise: */
isquarep(n) := is(isqrt(n)^2 = n)$


/* *******************
   * Sums of squares *
   *******************
*/

/* Testing for Pythagorean triples
   https://en.wikipedia.org/wiki/Pythagorean_triple :
*/
pythtripp(a,b,c) := a<b and b<c and every(naturalp, [a,b,c]) and a^2+b^2=c^2$
/* a,b are called "legs", and c the "hypotenuse". */
/* Now for a list L: */
pythtriptp(L) := listp(L) and length(L)=3 and pythtripp(first(L),second(L),third(L))$


/* The list of all Pythagorean triples [a,b,c] with c=n (with ascending
   second leg): */
pythtrip_hypo_bydef(n) := block([res : [], bs, b, ns:n^2, upper], upper:isqrt(floor(ns/2)), for a : 3 thru upper do (bs : ns - a^2, b : isqrt(bs), if b^2=bs then res:cons([a,b,n], res)), res)$

/* The list of all Pythagorean triples [a,b,c] with c <= n (first sorted by
   c, then by b):
*/
pythtrip_le_bydef(n) := lappend(create_list(pythtrip_hypo_bydef(i),i,5,n))$

/* Much faster is Dickson's method:
   https://en.wikipedia.org/wiki/Formulas_for_generating_Pythagorean_triples#Dickson.27s_method
   The order is as it comes out of the algorithm, and doesn't seem to have
   a real meaning; see below for derived methods, which do something about
   the order (give it a meaningful order, or forget the order).
*/
pythtrip_le_byDickson(n) := block([bound : floor(n/(1+sqrt(2))), res:[], rs,t],
 for r : 2 thru bound step 2 do (
   rs : r^2/2,
   for s in ohdivisors(rs) do (
     t : rs / s,
     if r+s+t <= n then res : cons([r+s,r+t,r+s+t],res)
   )
 ),
 reverse(res))$
/* An alternative implementation (same result, somewhat slower):
alt_D(n) := lappend(
   map(
     lambda([r], block([rs:r^2/2],
       sublist(
         map(lambda([s], block([t:rs/s], [r+s,r+t,r+s+t])),
             listify(ohdivisors(rs))),
       lambda([t], is(third(t) <= n))))),
     makelist(r,r,2, floor(n/(1+sqrt(2))),2)))$
*/

/* Sorted first by third component, then by second component: */
pythtrip_le_byDickson_sorted(n) := map(reverse,sort(map(reverse,pythtrip_le_byDickson(n)), orderlessp))$
/* Not as a list of lists, but as a set-system: */
pythtripses_le_byDickson(n) := setify(map(setify,pythtrip_le_byDickson(n)))$


/* The number of Pythagorean triples [a,b,c] with c=n:
   (this is https://oeis.org/A046080 )
*/
count_pythtrip_hypo_bydef(n) := length(pythtrip_hypo_bydef(n))$
/* Much faster: */
count_pythtrip_hypo(n) := if n <= 0 then 0 else
 block([P : ifactors(n)], P : 2*map(second,sublist(P, lambda([p], is(mod(first(p),4)=1)))) + 1, (prod_l(P)-1)/2)$

/* The number of Pythagorean triples [a,b,c] with c <= n:
   (this is https://oeis.org/A224921, starting with n=0)
*/
count_pythtrip_le_bydef(n) := sum_l(create_list(count_pythtrip_hypo_bydef(i),i,5,n))$
count_pythtrip_le_byfact(n) := sum_l(create_list(count_pythtrip_hypo(i),i,5,n))$
count_pythtrip_le_byDickson(n) := block([bound : floor(n/(1+sqrt(2))), res:0, rs],
 for r : 2 thru bound step 2 do (
   rs : r*r/2,
   for s in ohdivisors(rs) do if r+s+rs/s <= n then res : res+1
 ),
 res)$
/* byfact seems always fastest. */

/*!
\endhtmlonly
*/

