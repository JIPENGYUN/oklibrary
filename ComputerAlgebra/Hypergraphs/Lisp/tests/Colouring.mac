/* Oliver Kullmann, 22.7.2008 (Swansea) */
/* Copyright 2008, 2009, 2012, 2016 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/tests/Colouring.mac
  \brief Tests for colouring-related functions

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/tests/Colouring.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/NonBoolean.mac")$


kill(f)$


/* *******************************
   * Translations to boolean SAT *
   *******************************
*/

okltest_colv_string(f) := (
  assert(f(colv({})) = "E "),
  assert(f(-colv({})) = "-E "),
  assert(f(colv({1})) = "1 "),
  assert(f(-colv({1})) = "-1 "),
  assert(f(colv({1,2})) = "1S2 "),
  assert(f(-colv({1,2})) = "-1S2 "),
  assert(f(colv({1,2,3,4})) = "1S2S3S4 "),
  true)$

okltest_tcol2sat_hg2fcs(f) := (
  assert(f([{},{}]) = [{},{}]),
  assert(f([{},{{}}]) = [{},{{}}]),
  assert(f([{1},{{},{1}}]) = [{colv(1)},{{},{colv(1)},{-colv(1)}}]),
  assert(f([{1,2},{{1},{1,2}}]) = [{colv(1),colv(2)},{{colv(1)},{colv(1),colv(2)},{-colv(1)},{-colv(1),-colv(2)}}]),
  true)$

okltest_tcol2sat_stdhg2stdfcs(f) := (
  assert(f([{},{}]) = [{},{}]),
  assert(f([{},{{}}]) = [{},{{}}]),
  assert(f([{1},{{},{1}}]) = [{1},{{},{1},{-1}}]),
  assert(f([{1,2},{{1},{1,2}}]) = [{1,2},{{1},{1,2},{-1},{-1,-2}}]),
  true)$

okltest_tcol2sat_ohg2fcl(f) := (
  assert(f([[],[]]) = [[],[]]),
  assert(f([[],[{}]]) = [[],[{},{}]]),
  assert(f([[1],[{},{1}]]) = [[colv(1)],[{},{colv(1)},{},{-colv(1)}]]),
  assert(f([[2,1],[{1},{1,2}]]) = [[colv(2),colv(1)],[{colv(1)},{colv(1),colv(2)},{-colv(1)},{-colv(1),-colv(2)}]]),
  assert(okltest_tcol2sat_hg2fcs(buildq([f],lambda([G],fcl2fcs(f(hg2ohg(G))))))),
  true)$

okltest_tcol2sat_stdohg2stdfcl(f) := (
  assert(f([[],[]]) = [[],[]]),
  assert(f([[],[{}]]) = [[],[{},{}]]),
  assert(f([[2],[{2},{}]]) = [[2],[{2},{},{-2},{}]]),
  assert(f([[2,1],[{1},{1,2}]]) = [[2,1],[{1},{1,2},{-1},{-1,-2}]]),
  assert(okltest_tcol2sat_stdhg2stdfcs(buildq([f],lambda([G],fcl2fcs(f(hg2ohg(G))))))),
  true)$


/* ***********************************
   * Translations to non-boolean SAT *
   ***********************************
*/

okltest_col2sat_ohg2nbfclud(f) := block([x],
  assert(f([[],[]],[]) = [[],[],[]]),
  assert(f([[],[{}]],[]) = [[],[{}],[]]),
  assert(f([[],[{},{}]],[]) = [[],[{},{}],[]]),
  assert(f([[],[{}]],[1,2]) = [[],[{},{}],[1,2]]),
  assert(f([[2,1],[{}]],[2]) = [[colv(2),colv(1)],[{}],[2]]),
  assert(f([[2,1],[{1,2},{1}]],[3,x]) = [[colv(2),colv(1)], 
    [{[colv(1),3],[colv(2),3]},{[colv(1),3]},{[colv(1),x],[colv(2),x]},{[colv(1),x]}], [3,x]]),
  /* XXX */
  true)$

okltest_col2sat_stdohg2stdnbfclud(f) := block([x,y],
  assert(f([[],[]],[]) = [[],[], []]),
  assert(f([[],[{}]],[]) = [[],[{}], []]),
  assert(f([[],[{},{}]],[]) = [[],[{},{}], []]),
  assert(f([[],[{}]],[1,2]) = [[],[{},{}], [1,2]]),
  assert(f([[1,2],[{1},{1,2}]],[x,y]) = [[1,2],
    [{[1,x]},{[1,x],[2,x]},{[1,y]},{[1,y],[2,y]}], [x,y]]),
  assert(okltest_col2sat_stdhg2stdnbfcsud(buildq([f], lambda([G,S], nbfclud2nbfcsud(f(hg2ohg(G), listify(S)))))) = true),
  /* XXX */
  true)$

okltest_col2sat_stdhg2stdnbfcsud(f) := block([x,y],
  assert(f([{},{}],{}) = [{},{},{}]),
  assert(f([{},{{}}],{}) = [{},{{}},{}]),
  assert(f([{},{{}}],{1,2}) = [{},{{}}, {1,2}]),
  assert(f([{1,2},{{1},{1,2}}],{x,y}) = [{1,2},
    {{[1,x]},{[1,x],[2,x]},{[1,y]},{[1,y],[2,y]}}, {x,y}]),
  /* XXX */
  true)$

okltest_gcol2sat_ohg2nbfclud(f) := block([x,y],
  assert(f([],[]) = [[],[],[]]),
  assert(f([[[],[]]],[x]) = [[],[],[x]]),
  assert(f([[[],[{}]]],[x]) = [[],[{}],[x]]),
  assert(f([[[2,1],[{}]]],[x]) = [[colv(2),colv(1)],[{}],[x]]),
  assert(f([[[2,1],[{},{1},{2},{1,2}]]],[x]) = [[colv(2),colv(1)],[{},{[colv(1),x]},{[colv(2),x]},{[colv(1),x],[colv(2),x]}],[x]]),
  assert(f([[[],[]],[[],[]]],[x,y]) = [[],[],[x,y]]),
  assert(f([[[2,3],[]],[[1,3],[]]],[x,y]) = [[colv(2),colv(3),colv(1)],[],[x,y]]),
  assert(f([[[2,3],[{}]],[[1,3],[{}]]],[x,y]) = [[colv(2),colv(3),colv(1)],[{},{}],[x,y]]),
  assert(f([[[2,3],[{}]],[[1,3],[{1},{1,3}]]],[x,y]) = [[colv(2),colv(3),colv(1)],[{},{[colv(1),y]},{[colv(1),y],[colv(3),y]}],[x,y]]),
  assert(f([[[2,3],[{3},{2,3},{}]],[[1,3],[{1},{1,3}]]],[x,y]) = [[colv(2),colv(3),colv(1)],[{[colv(3),x]},{[colv(2),x],[colv(3),x]},{},{[colv(1),y]},{[colv(1),y],[colv(3),y]}],[x,y]]),
  assert(okltest_gcol2sat_stdohg2stdnbfclud(buildq([f],lambda([GG,S], ev(f(GG,S), colv(x):=x, nouns)))) = true),
  true)$

okltest_gcol2sat_stdohg2stdnbfclud(f) := block(
  assert(f([],[]) = [[],[],[]]),
  assert(f([[[],[]]],[x]) = [[],[],[x]]),
  assert(f([[[],[{}]]],[x]) = [[],[{}],[x]]),
  assert(f([[[2,1],[{}]]],[x]) = [[2,1],[{}],[x]]),
  assert(f([[[2,1],[{},{1},{2},{1,2}]]],[x]) = [[2,1],[{},{[1,x]},{[2,x]},{[1,x],[2,x]}],[x]]),
  assert(f([[[],[]],[[],[]]],[x,y]) = [[],[],[x,y]]),
  assert(f([[[2,3],[]],[[1,3],[]]],[x,y]) = [[2,3,1],[],[x,y]]),
  assert(f([[[2,3],[{}]],[[1,3],[{}]]],[x,y]) = [[2,3,1],[{},{}],[x,y]]),
  assert(f([[[2,3],[{}]],[[1,3],[{1},{1,3}]]],[x,y]) = [[2,3,1],[{},{[1,y]},{[1,y],[3,y]}],[x,y]]),
  assert(f([[[2,3],[{3},{2,3},{}]],[[1,3],[{1},{1,3}]]],[x,y]) = [[2,3,1],[{[3,x]},{[2,x],[3,x]},{},{[1,y]},{[1,y],[3,y]}],[x,y]]),
  true)$

okltest_gcol2sat_ohg2nbfclud_p(f) := block(
  assert(f(0,0) = false),
  /* XXX */
  true)$


/* ***************************************************************
   * Determining all k-colourings via the transversal hypergraph *
   ***************************************************************
*/

/* Testing whether f(G,k) is the set-system of all independent k-covers
   of G (together with G[1]):
*/
okltest_allindkcov_hg(f) := (
  assert(f([{},{}],0) = [{}, {{}}]),
  assert(f([{},{}],1) = [{}, {{{}}}]),
  assert(f([{},{}],2) = [{}, {}]),
  assert(f([{},{{}}],0) = [{}, {{}}]),
  assert(f([{},{{}}],1) = [{}, {}]),
  assert(f([{},{{}}],2) = [{}, {}]),
  assert(f([{1},{}],0) = [{1},{}]),
  assert(f([{1},{}],1) = [{1},{{{1}}}]),
  assert(f([{1},{}],2) = [{1},{}]),
  assert(f([{1},{{}}],0) = [{1},{}]),
  assert(f([{1},{{}}],1) = [{1},{}]),
  assert(f([{1},{{}}],2) = [{1},{}]),
  assert(f([{1},{{1}}],0) = [{1},{}]),
  assert(f([{1},{{1}}],1) = [{1},{}]),
  assert(f([{1},{{1}}],2) = [{1},{}]),
  assert(f([{1,2},{}],0) = [{1,2},{}]),
  assert(f([{1,2},{}],1) = [{1,2},{{{1,2}}}]),
  assert(f([{1,2},{}],2) = [{1,2},{}]),
  assert(f([{1,2},{}],3) = [{1,2},{}]),
  assert(f([{1,2},{{}}],0) = [{1,2},{}]),
  assert(f([{1,2},{{}}],1) = [{1,2},{}]),
  assert(f([{1,2},{{}}],2) = [{1,2},{}]),
  assert(f([{1,2},{{}}],3) = [{1,2},{}]),
  assert(f([{1,2},{{1}}],0) = [{1,2},{}]),
  assert(f([{1,2},{{1}}],1) = [{1,2},{}]),
  assert(f([{1,2},{{1}}],2) = [{1,2},{}]),
  assert(f([{1,2},{{1}}],3) = [{1,2},{}]),
  assert(f([{1,2},{{1},{2}}],0) = [{1,2},{}]),
  assert(f([{1,2},{{1},{2}}],1) = [{1,2},{}]),
  assert(f([{1,2},{{1},{2}}],2) = [{1,2},{}]),
  assert(f([{1,2},{{1},{2}}],3) = [{1,2},{}]),
  assert(f([{1,2},{{1,2}}],0) = [{1,2},{}]),
  assert(f([{1,2},{{1,2}}],1) = [{1,2},{}]),
  assert(f([{1,2},{{1,2}}],2) = [{1,2},{{{1},{2}}}]),
  assert(f([{1,2},{{1,2}}],3) = [{1,2},{}]),
  assert(f([{1,2},{{},{1,2}}],0) = [{1,2},{}]),
  assert(f([{1,2},{{},{1,2}}],1) = [{1,2},{}]),
  assert(f([{1,2},{{},{1,2}}],2) = [{1,2},{}]),
  assert(f([{1,2},{{},{1,2}}],3) = [{1,2},{}]),
  assert(f([{1,2},{{1},{1,2}}],0) = [{1,2},{}]),
  assert(f([{1,2},{{1},{1,2}}],1) = [{1,2},{}]),
  assert(f([{1,2},{{1},{1,2}}],2) = [{1,2},{}]),
  assert(f([{1,2},{{1},{1,2}}],3) = [{1,2},{}]),
  assert(f([{1,2},{{1},{2},{1,2}}],0) = [{1,2},{}]),
  assert(f([{1,2},{{1},{2},{1,2}}],1) = [{1,2},{}]),
  assert(f([{1,2},{{1},{2},{1,2}}],2) = [{1,2},{}]),
  assert(f([{1,2},{{1},{2},{1,2}}],3) = [{1,2},{}]),
  assert(f([{1,2,3},{{1,2,3}}],0) = [{1,2,3},{}]),
  assert(f([{1,2,3},{{1,2,3}}],1) = [{1,2,3},{}]),
  assert(f([{1,2,3},{{1,2,3}}],2) = [{1,2,3},{{{1,2},{2,3}},{{1,2},{1,3}},{{1,3},{2,3}}}]),
  assert(f([{1,2,3},{{1,2,3}}],3) = [{1,2,3},{{{1,2},{2,3},{1,3}}}]),
  assert(f([{1,2,3},{{1,2,3}}],4) = [{1,2,3},{}]),
  for n : 1 thru if oklib_test_level = 0 then 4 else 6 do
    for r : 1 thru 2 do
      for k : 0 thru n+1 do
        assert(f(complete_stdhg(n,r),k) = [setn(n), if r=1 then {} elseif k=n then {singletons(setn(n))} else {}]),
  /* XXX */
  true)$


/* **************
   * Reductions *
   **************
*/

okltest_reduce_isolates_ses(f) := (
  assert(f({}) = {}),
  assert(f({{1}}) = {}),
  assert(f({{1},{2}}) = {}),
  assert(f({{1,2}}) = {}),
  assert(f({{1,2},{2,3}}) = {}),
  assert(f({{1,2},{2,3},{3,1}}) = {{1,2},{2,3},{3,1}}),
  for n : 0 thru 10 do block([S:setify(create_list(setn(i),i,1,n))],
    assert(f(S) = {}),
    if n >= 2 then (
      S : adjoin({n}, S),
      assert(f(S) = S)
    )
  ),
  true)$

okltest_reduce_bounded_ses(f) := (
  assert(f({},0) = {}),
  assert(f({{1,2,3}},0) = {{1,2,3}}),
  assert(okltest_reduce_isolates_ses(buildq([f], lambda([G], f(G,1)))) = true),
  assert(f({{1,2},{1,3},{2,3},{2,4},{3,4},{2,3,4}},2) = {{2,3},{2,4},{3,4},{2,3,4}}),
  assert(f(adjoin({10},setify(create_list(setn(i),i,1,10))),2) = {}),
  assert(f({{1,2},{1,3},{2,3},{2,4},{3,4},{2,3,4}},3) = {}),
  true)$

/*!
\endhtmlonly
*/
