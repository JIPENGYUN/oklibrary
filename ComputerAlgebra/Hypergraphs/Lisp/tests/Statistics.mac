/* Oliver Kullmann, 5.7.2012 (Swansea) */
/* Copyright 2012, 2016 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/tests/Statistics.mac
  \brief Tests for hypergraph statistics functions

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/tests/Statistics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$


kill(f)$

/* ******************
   * Basic measures *
   ******************
*/

okltest_nhyp_list_ohg(f) := (
  assert(f([[],[]]) = []),
  assert(f([[],[{}]]) = [[0,1]]),
  assert(f([[1,2,3],[{1},{},{1,2},{},{1,2,3},{2,3},{2}]]) = [[0,2],[1,2],[2,2],[3,1]]),
  true)$


/* ******************
   * Vertex degrees *
   ******************
*/

okltest_vertex_degrees_nhyplist_hg(f) := (
  assert(hm2sm(f([{},{}])) = {}),
  assert(hm2sm(f([{},{{}}])) = {}),
  assert(hm2sm(f([{1},{}])) = {[1,[]]}),
  assert(hm2sm(f([{1},{{}}])) = {[1,[]]}),
  assert(hm2sm(f([{1},{{1}}])) = {[1,[[1,1]]]}),
  assert(hm2sm(f([{1,2},{{1},{1,2}}])) = {[1,[[1,1],[2,1]]],[2,[[2,1]]]}),
  true)$

okltest_isolated_vertices_ses(f) := (
  assert(f({}) = {}),
  for n : 0 thru 10 do block([N:setn(n)],
    assert(f({N}) = N),
    assert(f(singletons(N)) = N),
    assert(f(union({N},singletons(N))) = if n<=1 then N else {}),
    assert(f(powerset(N,2)) = if n<=1 then {} else if n=2 then N else {})
  ),
  for n : 1 thru 10 do block([S:setify(create_list(setn(i),i,0,n))],
    assert(f(S) = {n})
  ),
  true)$

okltest_vertices_bounded_ses(f) := (
  assert(f({},0) = {}),
  assert(f({{1,2,3}},0) = {}),
  assert(okltest_isolated_vertices_ses(buildq([f], lambda([G], f(G,1)))) = true),
  for n : 2 thru 10 do block([N:setn(n), S],
    S:powerset(N,2),
    for k : 2 thru 10 do
      assert(f(S,k) = if n <= k+1 then N else {})
  ),
  true)$

/*!
\endhtmlonly
*/
