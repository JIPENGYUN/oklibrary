/* Oliver Kullmann, 26.1.2008 (Swansea) */
/* Copyright 2008, 2009, 2012, 2016 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Colouring.mac
  \brief Functions related to colouring of hypergraphs

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Colouring.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Constructions.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Transversals/Minimal/RecursiveSplitting.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Statistics.mac")$


/* *******************************
   * Translations to boolean SAT *
   *******************************
*/

/* Colouring variables: terms colv(v), where v is a vertex: */
kill(colv)$
declare(colv,noun)$
declare(colv,posfun)$
colv_var(v) := nounify(colv)(v)$

/* Translates a colouring literal to an extended-dimacs compatible string: */
colv_string(l) := sconcat(
  if abs(l) = l then "" else "-",
  block([S : args(args(abs(l))[1])],
    sconcat(
      if length(S) = 0 then "E"
      else xreduce(
        lambda([a,b],sconcat(a,"S",b)),
        rest(S),first(S)),
      " ")))$

/* Translating the 2-colouring problem for hypergraph G into the SAT problem
   for a formal boolean clause-set: */
tcol2sat_hg2fcs(G) := block(
 [Fpos : map(lambda([H], map(colv_var,H)), listify(G[2]))],
  [map(colv_var,G[1]), setify(append(Fpos, comp_cs(Fpos)))])$
/* Using the vertices directly as variables; works for example for
   standardised hypergraphs: */
tcol2sat_stdhg2stdfcs(G) := [G[1], union(G[2], comp_cs(G[2]))]$
tcol2sat_stdohg2stdofcs(G) := [G[1], append(G[2], comp_cl(G[2]))]$

/* Now for ordered hypergraphs, producing clause-lists: */
/* If G does not contain an empty hyperedge, then the result is
   actually a (formal) ordered clause-list. */
tcol2sat_ohg2fcl(G) := [map(colv_var,G[1]),
  block([Fpos : map(lambda([H], map(colv_var,H)), G[2])],
    append(Fpos, comp_cl(Fpos)))]$
tcol2sat_stdohg2stdfcl(G) := [G[1], append(G[2], comp_cl(G[2]))]$

gtcol2sat_ohg2fcl(G1,G2) :=
 [map(colv_var,stable_unique(append(G1[1],G2[1]))),
  append(map(lambda([H], map(colv_var,H)), G1[2]),
         comp_cl(map(lambda([H], map(colv_var,H)), G2[2])))
 ]$
gtcol2sat_stdohg2stdfcl(G1,G2) := [
 create_list(i,i,1,max(length(G1[1]),length(G2[1]))),
 append(G1[2], comp_cl(G2[2]))
]$


/* ***********************************
   * Translations to non-boolean SAT *
   ***********************************
*/

/* Translating an S-colouring problem (S a set/list of colours) for
   hypergraph G into the SAT problem for a formal nb-clause-set (using
   non-boolean variables; with uniform domain).
*/

/* For an (arbitrary) ohg G and a list S of colours, using variables colv(v)
   for vertices v of G:
*/
col2sat_ohg2nbfclud(G,S) :=
 if emptyp(S) and emptyp(G[1]) then [[], G[2], []] else
 [
  map(colv_var,G[1]),
  block([Fpos : map(lambda([H], map(colv_var,H)), G[2])],
     lappend(create_list(map(lambda([C],cartesian_product(C,{c})),Fpos), c,S))),
  S]$
/* Now just using the vertices as variables: */
/* TODO: the function-name ("std") seems inappropriate, since arbitrary
   vertex-names make sense here.
*/
col2sat_stdohg2stdnbfclud(G,S) :=
 if emptyp(S) and emptyp(G[1]) then [[], G[2], []] else
 [
  G[1],
  lappend(create_list(map(lambda([C],cartesian_product(C,{c})),G[2]), c,S)),
  S]$
col2sat_stdhg2stdnbfcsud(G,S) :=
 if emptyp(S) and emptyp(G[1]) then [{}, G[2], {}] else
 [
  G[1],
  lunion(map(lambda([c], map(lambda([C],cartesian_product(C,{c})),G[2])), S)),
  S]$

/* Generalised colouring, where for hypergraph GG[i] every hyperedge must
   contain a vertex not coloured by colour S[i].
   Prerequisite: length(GG) = length(S).
*/
gcol2sat_ohg2nbfclud(GG,S) := [
 map(colv_var, stable_unique(lappend(map(first,GG)))),
 lappend(create_list(
          map(lambda([H], cartesian_product(map(colv_var,H),{S[i]})), GG[i][2]),
          i,1,length(S))),
 S]$
gcol2sat_stdohg2stdnbfclud(GG,S) := [
 stable_unique(lappend(map(first,GG))),
 lappend(create_list(
          map(lambda([H], cartesian_product(H,{S[i]})), GG[i][2]),
          i,1,length(S))),
 S]$
/* Checking the validity of the arguments (applies for both forms): */
gcol2sat_ohg2nbfclud_p(GG,S) :=
  listp(GG) and listp(S) and is(length(GG)=length(S))
  and every_s(ohg_p,GG)$


/* ***************************************************************
   * Determining all k-colourings via the transversal hypergraph *
   ***************************************************************
*/

/* k-colourings of a hypergraph G using exactly k colours can be represented
   by k-subsets s of powerset(G[1]) such that s is a covering of G[1] by
   maximal independent subsets.
   Let us call such a representation s an "independent k-cover"; more
   precisely it seems better to use the pair [V, S], where V is the
   vertex set of G, while S is the set of all independent k-covers.
   Equivalently, one can use such k-sets S consisting of minimal transversals
   such that their common intersection is empty; but it seems more appropriate
   to convert such an S into an S of the first form by taking complements.

   Remarks:
    - For the empty vertex set the correspondence to colouring is broken
      in two cases:
     + An empty set as a maximal independent subset can be used here
       exactly when G = [{},{}] and k=1; this does not correspond to a
       colouring using exactly one colour.
     + And an independent 0-cover exists exactly for  G = [{},{{}}]; again
       this does not correspond to a colouring (using exactly null colours
       --- but G is not colourable).
    - If in the k-cover two maximal independent sets would coincide then this
      actually is not possible. So for example [{1,2},{}] has no independent
      2-cover (while it has 4 2-colourings).
*/

/* Computing all k-colourings of hypergraph G as the set of all
   independent k-covers, using _hyptrans(G) for computing
   the transversal hypergraph of G:
*/
allindkcov_hyptrans_hg(G,k,_hyptrans) := block([V : G[1]],
 [V, map(lambda([S],ecomp(S,V)),anti_edge_k_hg(_hyptrans(G),k)[2])])$

/* The instantiation by the basic algorithm for computing the
   transversal hypergraph:
*/
allindkcov_hyptrans_rs_hg(G,k) := allindkcov_hyptrans_hg(G,k,transversal_hg_rs)$


/* **************
   * Reductions *
   **************
*/

/* For a set-system G and k >= 0, remove all hyperedges iteratively containing
   vertices occurring at most k times (this is (k+1)-colouring-equivalent, if
   there are no unit-hyperedges):
*/
/* First the special case of k = 1: */
reduce_isolates_ses(G) := block([U],
  do (
    U : isolated_vertices_ses(G),
    if emptyp(U) then return(G),
    G : remove_non_disjoint(G,U)
  )
)$
/* Now the general case: */
reduce_bounded_ses(G,k) := block([B],
  do (
    B : vertices_bounded_ses(G,k),
    if emptyp(B) then return(G),
    G : remove_non_disjoint(G,B)
  )
)$

/*!
\endhtmlonly
*/
