/* Oliver Kullmann, 30.5.2009 (Swansea) */
/* Copyright 2009, 2012, 2016 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Statistics.mac
  \brief Statistics for hypergraphs

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Statistics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$


/* ******************
   * Basic measures *
   ******************
*/

/* Counting the number of vertices: */

nver_hg(G) := length(G[1])$
nver_ohg(G) := length(G[1])$
nver_ghg(G) := length(G[1])$
nver_oghg(G) := length(G[1])$

/* Counting the number of hyperedges: */

nhyp_hg(G) := length(G[2])$
nhyp_ohg(G) := length(G[2])$
nhyp_ghg(G) := length(G[2])$
nhyp_oghg(G) := length(G[2])$

/* The list of pairs
   [occurring hyperedge-lengths, number of hyperedges of this length],
   sorted by ascending hyperedge-length:
*/
nhyp_list_ohg(G) := block([n : nver_ohg(G), counts, res : [], l],
  counts : make_array(fixnum, n+1),
  for H in G[2] do (l : length(H), counts[l] : counts[l] + 1),
  delete(0,create_list(if counts[i]=0 then 0 else [i, counts[i]], i,0,n)))$
nhyp_list_hg(G) := nhyp_list_ohg(G)$
/* Remark: Computing the same function as ncl_list_fcl rsp. ncl_list_fcs.
*/


/* ******************
   * Vertex degrees *
   ******************
*/

/* The vertex-degrees of a hypergraph, as hash-map: */
vertex_degrees_hg(G) := block([h : sm2hm({})],
 for H in G[2] do
  for v in H do enter_new_occurrence(h,v),
 for v in G[1] do
   if ev_hm(h,v)=false then set_hm(h,v,0),
 return(h))$
vertex_degrees_ohg(G) := vertex_degrees_hg(G)$
/* This hash-map as a list, sorted according to the vertex degrees: */
sorted_vertex_degrees_hg(G) := sort(hm2osm(vertex_degrees_hg(G)), 
 lambda([p1,p2],is(second(p1) > second(p2))))$
/* For ordered hypergraphs the sorting is stable w.r.t. the given
   order of vertices:
*/
sorted_vertex_degrees_ohg(G) := block(
 [h : osm2hm(map("[",G[1],create_list(i,i,1,length(G[1]))))],
  sort(hm2osm(vertex_degrees_ohg(G)),
   lambda([p1,p2],is(second(p1) > second(p2) or (second(p1) = second(p2) and ev_hm(h,first(p1)) < ev_hm(h,first(p2)))))))$


/* The extended vertex-degrees of hypergraph G as hash-map, which maps vertex v
   to the list of pairs [occurring hyperedge-edge lengths, count], sorted
   by ascending hyperedge-length:
*/
vertex_degrees_nhyplist_hg(G) := block([h : sm2hm({}), l],
 for v in G[1] do set_hm(h,v,sm2hm({})),
 for H in G[2] do (
   l : length(H),
   for v in H do enter_new_occurrence(ev_hm(h,v), l)
 ),
 for v in G[1] do set_hm(h,v, get_distribution(ev_hm(h,v))),
 h)$
/* For vertex v this is nhyp_list_hg(ses2hg(scs_l(G[2],v))). */


/* The set of vertices of set-system G which occur only once: */
isolated_vertices_ses(G) := block([U:{}, S:{}, N],
    for E in G do (
      N : setdifference(E,S),
      U : union(setdifference(U,E), N),
      S : union(S,N)
    ),
    U)$

/* The set of vertices of set-system G occuring at most k times: */
vertices_bounded_ses(G,k) :=
  map(first,subset(hm2sm(vertex_degrees_hg(ses2hg(G))), lambda([p], is(second(p)<=k))))$

/*!
\endhtmlonly
*/
